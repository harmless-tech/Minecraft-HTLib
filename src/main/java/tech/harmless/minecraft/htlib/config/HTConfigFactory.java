package tech.harmless.minecraft.htlib.config;

import org.jetbrains.annotations.NotNull;
import org.jetbrains.annotations.Nullable;
import tech.harmless.minecraft.htlib.HTLib;
import tech.harmless.minecraft.htlib.util.HTReflection;
import tech.harmless.minecraft.htlib.util.error.HTRuntimeErrors;

import java.io.File;
import java.io.IOException;
import java.lang.reflect.InvocationTargetException;

//TODO Allow for an interface to be used so more values can be generated by the user?
public final class HTConfigFactory {

    private static final String CONFIG_ROOT_DIR = "config/";
    private static final String CONFIG_FILE_EXT = ".json";

    @Nullable
    //TODO Remove the modID part, this should be gotten automatically?
    public static <T> T build(@NotNull String modId, @NotNull T config) {
        final Class<?> c = config.getClass();
        //TODO Check for @HTConfig. And correct type?
        //TODO File.
        //TODO Process keys. Check key types.

        if(c.isAnnotationPresent(HTConfig.class) && !c.isEnum() && !c.isInterface() && !c.isAnnotation() &&
                HTReflection.hasDefaultConstructor(c)) {
            // Create/get file.
            final HTConfig rootConfig = c.getAnnotation(HTConfig.class);
            final File f = getOrCreateFile(modId, rootConfig.configName(), rootConfig.inFolder(), c);

            try {
                Object instance = c.getConstructor().newInstance();
            }
            catch(InstantiationException | IllegalAccessException | InvocationTargetException | NoSuchMethodException e) {
                e.printStackTrace();
            }
        }

        throw new RuntimeException(HTRuntimeErrors.CONFIG_ERROR);
    }

    @NotNull
    private static File getOrCreateFile(String modId, String configName, boolean folder, Class<?> c) {
        try {
            File f = new File(CONFIG_ROOT_DIR + (folder ? modId + "/" : "") + configName + CONFIG_FILE_EXT);
            if(!f.exists()) {
                if(!f.createNewFile()) {
                    HTLib.LOG.error("Could not create the config file " + f.getAbsolutePath());
                    throw new RuntimeException(HTRuntimeErrors.CONFIG_ERROR);
                }

                // Populate file.
            }

            return f;
        }
        catch(IOException | SecurityException e) {
            e.printStackTrace();
            throw new RuntimeException(HTRuntimeErrors.CONFIG_ERROR);
        }
    }
}
